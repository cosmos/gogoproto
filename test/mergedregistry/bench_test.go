package mergedregistry_test

import (
	_ "embed"
	"encoding/json"
	"fmt"
	"testing"

	"google.golang.org/protobuf/reflect/protodesc"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/descriptorpb"

	"github.com/cosmos/gogoproto/proto"
)

func BenchmarkDefaultGlobalMergedFileDescriptors(b *testing.B) {
	gf := protoregistry.GlobalFiles
	afd := proto.AllFileDescriptors()
	wantSize := gf.NumFiles() + len(afd)

	// Note the global and app counts here.
	// This benchmark is interesting for allocations,
	// but with only probably 11 file descriptors, we don't see much concurrency help.
	b.Run(fmt.Sprintf("%d global, %d app", gf.NumFiles(), len(afd)), func(b *testing.B) {
		b.ReportAllocs()
		b.ResetTimer()

		for i := 0; i < b.N; i++ {
			fds, err := proto.MergedGlobalFileDescriptors()
			if err != nil {
				b.Fatal(err)
			}

			if len(fds.File) != wantSize {
				b.Fatalf("expected %d FDs, got %d", wantSize, len(fds.File))
			}
		}
	})
}

// Generated by manually marshalling from simd:
//
//	bz, err := json.Marshal(proto.AllFileDescriptors())
//	if err != nil {
//		panic(err)
//	}
//	if err := os.WriteFile("/tmp/allfd.json", bz, 0600); err != nil {
//		panic(err)
//	}
//
//go:embed testdata/simd-allfd-c4489d.json
var simdAllFDs_c4489d []byte

// Generated by manually marshalling from simd:
//
//	var m []*descriptorpb.FileDescriptorProto
//	protoregistry.GlobalFiles.RangeFiles(func(fd protoreflect.FileDescriptor) bool {
//		m = append(m, protodesc.ToFileDescriptorProto(fd))
//		return true
//	})
//
//	bz, err := json.Marshal(m)
//	if err != nil {
//		panic(err)
//	}
//	if err := os.WriteFile("/tmp/globalfd.json", bz, 0600); err != nil {
//		panic(err)
//	}
//
//go:embed testdata/simd-globalfd-c4489d.json
var simdGlobalFDs_c4489d []byte

// This benchmark uses the file descriptors we extracted from simapp,
// doing some gentle cleanup to account for being in this different go module.
func BenchmarkRepresentativeMergedFileDescriptors(b *testing.B) {
	// The "allFDs" set appears to always be safe to unmarshal.
	var allFDs map[string][]byte
	if err := json.Unmarshal(simdAllFDs_c4489d, &allFDs); err != nil {
		b.Fatal(err)
	}

	allFiles := fileDescriptorMapToFiles(b, allFDs)

	// But the global FDs are much more touchy.
	// Some reference files we don't have available in this test package.
	//
	// First we have to unmarshal the raw FD protos.
	var globalFDs []*descriptorpb.FileDescriptorProto
	if err := json.Unmarshal(simdGlobalFDs_c4489d, &globalFDs); err != nil {
		b.Fatal(err)
	}

	// Then we make two passes over what has been deserialized.
	haveGlobal := map[string]struct{}{}
	gf := new(protoregistry.Files)

	// First, add only the files that have no dependencies, as those are safe to add.
	for _, fd := range globalFDs {
		if len(fd.Dependency) > 0 {
			continue
		}

		f, err := protodesc.NewFile(fd, nil) // No resolver for these.
		if err != nil {
			panic(err)
		}
		gf.RegisterFile(f)

		haveGlobal[fd.GetName()] = struct{}{}
	}

	// Now one more pass for those files that do have a dependency.
	// We won't add every single file in this case,
	// but we will add enough for a decent representation of the SDK's protobuf files.
SECONDPASS:
	for _, fd := range globalFDs {
		if len(fd.Dependency) == 0 {
			// Already added this one in the first pass.
			continue
		}
		for _, d := range fd.Dependency {
			_, have := haveGlobal[d]
			if !have {
				continue SECONDPASS
			}
		}

		f, err := protodesc.NewFile(fd, gf) // gf is the "self" resolver.
		if err != nil {
			panic(err)
		}
		gf.RegisterFile(f)
		haveGlobal[f.Path()] = struct{}{}
	}

	// Calculate the expected output size, accounting for expected deduplication.
	wantSize := len(allFDs) + len(haveGlobal)
	for name := range allFDs {
		if _, ok := haveGlobal[name]; ok {
			wantSize--
		}
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		fds, err := proto.MergedFileDescriptors(gf, allFiles)
		if err != nil {
			b.Fatal(err)
		}

		if len(fds.File) != wantSize {
			b.Fatalf("expected %d FDs, got %d", wantSize, len(fds.File))
		}
	}
}
