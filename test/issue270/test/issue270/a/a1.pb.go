// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test/issue270/a/a1.proto

package test_issue270_a

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type A1 struct {
	A2                   *A2      `protobuf:"bytes,1,opt,name=a2" json:"a2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *A1) Reset()         { *m = A1{} }
func (m *A1) String() string { return proto.CompactTextString(m) }
func (*A1) ProtoMessage()    {}
func (*A1) Descriptor() ([]byte, []int) {
	return fileDescriptor_96d811b4f814c4d2, []int{0}
}
func (m *A1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_A1.Unmarshal(m, b)
}
func (m *A1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_A1.Marshal(b, m, deterministic)
}
func (m *A1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_A1.Merge(m, src)
}
func (m *A1) XXX_Size() int {
	return xxx_messageInfo_A1.Size(m)
}
func (m *A1) XXX_DiscardUnknown() {
	xxx_messageInfo_A1.DiscardUnknown(m)
}

var xxx_messageInfo_A1 proto.InternalMessageInfo

func (m *A1) GetA2() *A2 {
	if m != nil {
		return m.A2
	}
	return nil
}

func init() {
	proto.RegisterType((*A1)(nil), "test.issue270.a.A1")
}

func init() { proto.RegisterFile("test/issue270/a/a1.proto", fileDescriptor_96d811b4f814c4d2) }

var fileDescriptor_96d811b4f814c4d2 = []byte{
	// 114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x49, 0x2d, 0x2e,
	0xd1, 0xcf, 0x2c, 0x2e, 0x2e, 0x4d, 0x35, 0x32, 0x37, 0xd0, 0x4f, 0xd4, 0x4f, 0x34, 0xd4, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x07, 0xc9, 0xe8, 0xc1, 0x64, 0xf4, 0x12, 0xa5, 0x44, 0xd2,
	0xf3, 0xd3, 0xf3, 0xc1, 0x72, 0xfa, 0x20, 0x16, 0x44, 0x99, 0x14, 0xa6, 0x01, 0x46, 0x10, 0x19,
	0x25, 0x4d, 0x2e, 0x26, 0x47, 0x43, 0x21, 0x65, 0x2e, 0xa6, 0x44, 0x23, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0x6e, 0x23, 0x61, 0x3d, 0x34, 0x33, 0xf5, 0x1c, 0x8d, 0x82, 0x98, 0x12, 0x8d, 0x9c, 0x58,
	0x7e, 0x3c, 0x94, 0x63, 0x04, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xec, 0x0f, 0x72, 0x8c, 0x00,
	0x00, 0x00,
}

func NewPopulatedA1(r randyA1, easy bool) *A1 {
	this := &A1{}
	if r.Intn(5) != 0 {
		this.A2 = NewPopulatedA2(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedA1(r, 2)
	}
	return this
}

type randyA1 interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneA1(r randyA1) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringA1(r randyA1) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneA1(r)
	}
	return string(tmps)
}
func randUnrecognizedA1(r randyA1, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldA1(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldA1(dAtA []byte, r randyA1, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateA1(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateA1(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateA1(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateA1(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateA1(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateA1(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateA1(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
