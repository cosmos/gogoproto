// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: typedeclimport.proto

package typedeclimport

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	subpkg "github.com/cosmos/gogoproto/test/typedeclimport/subpkg"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *SomeMessage) Reset()         { *m = SomeMessage{} }
func (m *SomeMessage) String() string { return proto.CompactTextString(m) }
func (*SomeMessage) ProtoMessage()    {}
func (*SomeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_47149c7887ba1639, []int{0}
}
func (m *SomeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SomeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SomeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SomeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SomeMessage.Merge(m, src)
}
func (m *SomeMessage) XXX_Size() int {
	return m.Size()
}
func (m *SomeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SomeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SomeMessage proto.InternalMessageInfo

func (m *SomeMessage) GetImported() subpkg.AnotherMessage {
	if m != nil {
		return m.Imported
	}
	return subpkg.AnotherMessage{}
}

func init() {
	proto.RegisterType((*SomeMessage)(nil), "typedeclimport.SomeMessage")
}

func init() { proto.RegisterFile("typedeclimport.proto", fileDescriptor_47149c7887ba1639) }

var fileDescriptor_47149c7887ba1639 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0xa9, 0x2c, 0x48,
	0x4d, 0x49, 0x4d, 0xce, 0xc9, 0xcc, 0x2d, 0xc8, 0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x43, 0x15, 0x95, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x4b, 0xe9, 0x83, 0x58, 0x10,
	0x55, 0x52, 0xea, 0x25, 0xa9, 0xc5, 0x25, 0xfa, 0xa8, 0x4a, 0xf5, 0x8b, 0x4b, 0x93, 0x0a, 0xb2,
	0xd3, 0xa1, 0x14, 0x44, 0xa1, 0x92, 0x2f, 0x17, 0x77, 0x70, 0x7e, 0x6e, 0xaa, 0x6f, 0x6a, 0x71,
	0x71, 0x62, 0x7a, 0xaa, 0x90, 0x05, 0x17, 0x07, 0x44, 0x71, 0x6a, 0x8a, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0xb7, 0x91, 0x98, 0x1e, 0x54, 0xbd, 0x63, 0x5e, 0x7e, 0x49, 0x46, 0x6a, 0x11, 0x54, 0xa5,
	0x13, 0xcb, 0x89, 0x7b, 0xf2, 0x0c, 0x41, 0x70, 0xd5, 0x56, 0x2c, 0x1f, 0x16, 0xca, 0x33, 0x38,
	0x89, 0x3c, 0x78, 0x28, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e,
	0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x98, 0xc4, 0x06, 0xb6, 0xcb, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0xd8, 0x21, 0xbf, 0xf3, 0xd2, 0x00, 0x00, 0x00,
}

func (this *SomeMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SomeMessage)
	if !ok {
		that2, ok := that.(SomeMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SomeMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SomeMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SomeMessage but is not nil && this == nil")
	}
	if !this.Imported.Equal(&that1.Imported) {
		return fmt.Errorf("Imported this(%v) Not Equal that(%v)", this.Imported, that1.Imported)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SomeMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SomeMessage)
	if !ok {
		that2, ok := that.(SomeMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Imported.Equal(&that1.Imported) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *SomeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SomeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SomeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Imported.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypedeclimport(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypedeclimport(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypedeclimport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SomeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Imported.Size()
	n += 1 + l + sovTypedeclimport(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypedeclimport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypedeclimport(x uint64) (n int) {
	return sovTypedeclimport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SomeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypedeclimport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SomeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SomeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imported", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypedeclimport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypedeclimport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypedeclimport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Imported.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypedeclimport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypedeclimport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypedeclimport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypedeclimport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypedeclimport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypedeclimport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypedeclimport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypedeclimport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypedeclimport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypedeclimport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypedeclimport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypedeclimport = fmt.Errorf("proto: unexpected end of group")
)
